package com.sheliming.tree;

/**
 * 红黑树
 * <p>
 * 树的平衡：对树中的每个节点在它左边的后代数目和在它右边的后代数目应该大致相等
 * <p>
 * 1.每个节点不是红色就是黑色的；
 * 2.根节点总是黑色的；
 * 3.如果节点是红色的，则它的子节点必须是黑色的（反之不一定）；
 * 4.从根节点到叶节点或空子节点的每条路径，必须包含相同数目的黑色节点（即相同的黑色高度）。
 * <p>
 * 在红-黑树中插入的节点都是红色的，这不是偶然的，因为插入一个红色节点比插入一个黑色节点违背红-黑规则的可能性更小。
 * 原因是：插入黑色节点总会改变黑色高度（违背规则4），但是插入红色节点只有一半的机会会违背规则3。
 * 另外违背规则3比违背规则4要更容易修正。
 * <p>
 * 红-黑树主要通过三种方式对平衡进行修正，改变节点颜色、左旋和右旋。
 */
public class RBTree {
}
